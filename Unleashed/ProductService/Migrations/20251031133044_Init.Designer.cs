// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductService.Data;

#nullable disable

namespace ProductService.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20251031133044_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductService.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<DateTimeOffset?>("BrandCreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("brand_created_at");

                    b.Property<string>("BrandDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("brand_description");

                    b.Property<string>("BrandImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("brand_image_url");

                    b.Property<string>("BrandName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("brand_name");

                    b.Property<DateTimeOffset?>("BrandUpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("brand_updated_at");

                    b.Property<string>("BrandWebsiteUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("brand_website_url");

                    b.HasKey("BrandId")
                        .HasName("brand_pkey");

                    b.ToTable("brand");
                });

            modelBuilder.Entity("ProductService.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTimeOffset?>("CategoryCreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("category_created_at");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category_description");

                    b.Property<string>("CategoryImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("category_image_url");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTimeOffset?>("CategoryUpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("category_updated_at");

                    b.HasKey("CategoryId")
                        .HasName("category_pkey");

                    b.ToTable("category");
                });

            modelBuilder.Entity("ProductService.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<string>("ColorHexCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("color_hex_code");

                    b.Property<string>("ColorName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("color_name");

                    b.HasKey("ColorId")
                        .HasName("color_pkey");

                    b.ToTable("color");
                });

            modelBuilder.Entity("ProductService.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_code");

                    b.Property<DateTimeOffset?>("ProductCreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("product_created_at");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_description");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_name");

                    b.Property<int?>("ProductStatusId")
                        .HasColumnType("int")
                        .HasColumnName("product_status_id");

                    b.Property<DateTimeOffset?>("ProductUpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("product_updated_at");

                    b.HasKey("ProductId")
                        .HasName("product_pkey");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductStatusId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("ProductService.Models.ProductCategory", b =>
                {
                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_category");
                });

            modelBuilder.Entity("ProductService.Models.ProductStatus", b =>
                {
                    b.Property<int>("ProductStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductStatusId"));

                    b.Property<string>("ProductStatusName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_status_name");

                    b.HasKey("ProductStatusId")
                        .HasName("product_status_pkey");

                    b.ToTable("product_status");
                });

            modelBuilder.Entity("ProductService.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("size_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"));

                    b.Property<string>("SizeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("size_name");

                    b.HasKey("SizeId")
                        .HasName("size_pkey");

                    b.ToTable("size");
                });

            modelBuilder.Entity("ProductService.Models.Variation", b =>
                {
                    b.Property<int>("VariationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("variation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariationId"));

                    b.Property<int?>("ColorId")
                        .HasColumnType("int")
                        .HasColumnName("color_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("size_id");

                    b.Property<string>("VariationImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("variation_image");

                    b.Property<decimal?>("VariationPrice")
                        .HasColumnType("decimal(22, 2)")
                        .HasColumnName("variation_price");

                    b.HasKey("VariationId")
                        .HasName("PK_variation_temp");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("variation");
                });

            modelBuilder.Entity("ProductService.Models.Product", b =>
                {
                    b.HasOne("ProductService.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("product_brand_id_fkey");

                    b.HasOne("ProductService.Models.ProductStatus", "ProductStatus")
                        .WithMany("Products")
                        .HasForeignKey("ProductStatusId")
                        .HasConstraintName("product_product_status_id_fkey");

                    b.Navigation("Brand");

                    b.Navigation("ProductStatus");
                });

            modelBuilder.Entity("ProductService.Models.ProductCategory", b =>
                {
                    b.HasOne("ProductService.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("product_category_category_id_fkey");

                    b.HasOne("ProductService.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("product_category_product_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductService.Models.Variation", b =>
                {
                    b.HasOne("ProductService.Models.Color", "Color")
                        .WithMany("Variations")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK9gqn7oby75ixq0fg8w902pjcf");

                    b.HasOne("ProductService.Models.Product", "Product")
                        .WithMany("Variations")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK1hxfv06p366bhb8sce1djt2v7");

                    b.HasOne("ProductService.Models.Size", "Size")
                        .WithMany("Variations")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FKe3asl55h6omj6x27479hnprov");

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ProductService.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductService.Models.Color", b =>
                {
                    b.Navigation("Variations");
                });

            modelBuilder.Entity("ProductService.Models.Product", b =>
                {
                    b.Navigation("Variations");
                });

            modelBuilder.Entity("ProductService.Models.ProductStatus", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductService.Models.Size", b =>
                {
                    b.Navigation("Variations");
                });
#pragma warning restore 612, 618
        }
    }
}
