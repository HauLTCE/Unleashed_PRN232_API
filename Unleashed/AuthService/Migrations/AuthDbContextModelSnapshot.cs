// <auto-generated />
using System;
using AuthService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthService.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthService.Models.Rank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rank_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RankId"));

                    b.Property<decimal?>("RankBaseDiscount")
                        .HasColumnType("numeric(3, 2)")
                        .HasColumnName("rank_base_discount");

                    b.Property<string>("RankName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rank_name");

                    b.Property<int?>("RankNum")
                        .HasColumnType("int")
                        .HasColumnName("rank_num");

                    b.Property<decimal?>("RankPaymentRequirement")
                        .HasColumnType("decimal(22, 2)")
                        .HasColumnName("rank_payment_requirement");

                    b.HasKey("RankId")
                        .HasName("rank_pkey");

                    b.ToTable("rank");
                });

            modelBuilder.Entity("AuthService.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("role_pkey");

                    b.ToTable("role");
                });

            modelBuilder.Entity("AuthService.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<bool?>("IsUserEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("is_user_enabled");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("UserAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_address");

                    b.Property<string>("UserBirthdate")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_birthdate");

                    b.Property<DateTimeOffset?>("UserCreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("user_created_at");

                    b.Property<string>("UserCurrentPaymentMethod")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_current_payment_method");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_email");

                    b.Property<string>("UserFullname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_fullname");

                    b.Property<string>("UserGoogleId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_google_id");

                    b.Property<string>("UserImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_image");

                    b.Property<string>("UserPassword")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_password");

                    b.Property<string>("UserPhone")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("user_phone");

                    b.Property<DateTimeOffset?>("UserUpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("user_updated_at");

                    b.Property<string>("UserUsername")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_username");

                    b.HasKey("UserId")
                        .HasName("user_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("AuthService.Models.UserRank", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<decimal?>("MoneySpent")
                        .HasColumnType("decimal(22, 2)")
                        .HasColumnName("money_spent");

                    b.Property<DateTimeOffset?>("RankCreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("rank_created_date");

                    b.Property<DateOnly>("RankExpireDate")
                        .HasColumnType("date")
                        .HasColumnName("rank_expire_date");

                    b.Property<int>("RankId")
                        .HasColumnType("int")
                        .HasColumnName("rank_id");

                    b.Property<short>("RankStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("rank_status");

                    b.Property<DateTimeOffset?>("RankUpdatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("rank_updated_date");

                    b.HasKey("UserId")
                        .HasName("user_rank_pkey");

                    b.HasIndex("RankId");

                    b.ToTable("user_rank");
                });

            modelBuilder.Entity("AuthService.Models.User", b =>
                {
                    b.HasOne("AuthService.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("user_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthService.Models.UserRank", b =>
                {
                    b.HasOne("AuthService.Models.Rank", "Rank")
                        .WithMany("UserRanks")
                        .HasForeignKey("RankId")
                        .IsRequired()
                        .HasConstraintName("user_rank_rank_id_fkey");

                    b.HasOne("AuthService.Models.User", "User")
                        .WithOne("UserRank")
                        .HasForeignKey("AuthService.Models.UserRank", "UserId")
                        .IsRequired()
                        .HasConstraintName("user_rank_user_id_fkey");

                    b.Navigation("Rank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthService.Models.Rank", b =>
                {
                    b.Navigation("UserRanks");
                });

            modelBuilder.Entity("AuthService.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AuthService.Models.User", b =>
                {
                    b.Navigation("UserRank");
                });
#pragma warning restore 612, 618
        }
    }
}
